// Generated by CoffeeScript 1.3.2
(function() {
  var Drone, arDrone, client, drone, last_key, stdin, stopped;

  arDrone = require('ar-drone');

  client = arDrone.createClient();

  Drone = (function() {

    function Drone() {}

    Drone.prototype.state = 'stopped';

    Drone.prototype.takeoff = function() {
      return client.takeoff();
    };

    Drone.prototype.stop = function() {
      client.stop();
      return this.state = 'stopped';
    };

    Drone.prototype.up = function() {
      if (this.state !== 'rising') {
        client.up(0.1);
        return this.state = 'rising';
      }
    };

    return Drone;

  })();

  drone = new Drone();

  stdin = process.stdin;

  stdin.setRawMode(true);

  stdin.resume();

  stdin.setEncoding('utf8');

  drone.last_press = null;

  last_key = null;

  stopped = true;

  stdin.on('data', function(key) {
    console.log('pressed ' + key + '\n');
    console.log('last key was ' + last_key + '\n');
    stopped = false;
    switch (key) {
      case 't':
        if (last_key !== 't' || stopped === true) {
          console.log('Taking off');
          client.takeoff();
        }
        break;
      case 'g':
        if (last_key !== 'g' || stopped === true) {
          console.log('Landing');
          client.land();
        }
        break;
      case 'j':
        if (last_key !== 'j' || stopped === true) {
          console.log('rotating counter clockwise');
          client.counterClockwise(0.1);
        }
        break;
      case 'l':
        if (last_key !== 'l') {
          console.log('rotating clockwise');
          client.clockwise(0.1);
        }
        break;
      case 'i':
        console.log('going up');
        client.up(0.1);
        break;
      case 'k':
        if (last_key !== 'k') {
          console.log('rotating clockwise');
          client.down(0.1);
        }
        break;
      case 'a':
        if (last_key !== 'a') {
          console.log('turning left');
          client.left(0.1);
        }
        break;
      case 'd':
        if (last_key !== 'd') {
          console.log('turning right');
          client.right(0.1);
        }
        break;
      case 'w':
        if (last_key !== 'w') {
          console.log('going forward');
          client.front(0.1);
        }
        break;
      case 's':
        if (last_key !== 's') {
          console.log('going back');
          client.back(0.1);
        }
        break;
      case 'x':
        console.log('Stopping');
        client.stop();
        break;
      case '\u0003':
        process.exit();
    }
    last_key = key;
    drone.this_press = new Date().getTime();
    setTimeout((function(now, command) {
      return function() {
        if (now === drone.last_press) {
          console.log('stopping');
          return client.stop();
        }
      };
    })(drone.this_press), 50);
    return drone.last_press = drone.this_press;
  });

}).call(this);
